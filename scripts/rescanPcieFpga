#!/usr/bin/env python3
#-----------------------------------------------------------------------------
# Company    : SLAC National Accelerator Laboratory
#-----------------------------------------------------------------------------
#  Description: PCIe Device Reinitialization Script
#-----------------------------------------------------------------------------
# This file is part of the 'axi-pcie-core'. It is subject to
# the license terms in the LICENSE.txt file found in the top-level directory
# of this distribution and at:
#    https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
# No part of the 'axi-pcie-core', including this file, may be
# copied, modified, propagated, or distributed except according to the terms
# contained in the LICENSE.txt file.
#-----------------------------------------------------------------------------

import os
import subprocess
import time
import sys

VENDOR_ID = "1a4a"  # SLAC Vendor ID in hex
DEVICE_ID = "2030"  # DDEV Device ID in hex
DRIVER_NAME = None  # Optionally set to driver name (e.g., "xhci_hcd")

def find_pci_devices_by_id(vendor_id, device_id):
    devices = []
    try:
        result = subprocess.check_output(["lspci", "-Dn"]).decode("utf-8")
        for line in result.strip().split("\n"):
            parts = line.split()
            if len(parts) >= 3:
                pci_addr = parts[0]
                ids = parts[2].split(":")
                if len(ids) == 2 and ids[0].lower() == vendor_id.lower() and ids[1].lower() == device_id.lower():
                    print(f"Found device: {line}")
                    devices.append(pci_addr)
        if not devices:
            print(f"No PCIe devices found with Vendor ID '{vendor_id}' and Device ID '{device_id}'.")
    except Exception as e:
        print(f"Error running lspci: {e}")
    return devices

def write_sysfs(path, value):
    try:
        with open(path, 'w') as f:
            f.write(value)
    except Exception as e:
        print(f"Error writing to {path}: {e}")
        sys.exit(1)

def unbind_device(pci_addr):
    path = f"/sys/bus/pci/devices/{pci_addr}/driver/unbind"
    if os.path.exists(path):
        print(f"Unbinding {pci_addr}")
        write_sysfs(path, pci_addr)
    else:
        print(f"No driver bound or invalid device: {pci_addr}")

def remove_device(pci_addr):
    path = f"/sys/bus/pci/devices/{pci_addr}/remove"
    if os.path.exists(path):
        print(f"Removing {pci_addr} from PCI bus")
        write_sysfs(path, "1")
    else:
        print(f"Device {pci_addr} not found in sysfs")

def rescan_pci():
    path = "/sys/bus/pci/rescan"
    print("Rescanning PCI bus")
    write_sysfs(path, "1")

def bind_device(pci_addr, driver):
    if not driver:
        return
    path = f"/sys/bus/pci/drivers/{driver}/bind"
    if os.path.exists(path):
        print(f"Rebinding {pci_addr} to driver {driver}")
        write_sysfs(path, pci_addr)
    else:
        print(f"Driver {driver} not found. Skipping rebind.")

def main():
    print(f"Searching for PCIe devices with VENDOR_ID={VENDOR_ID} & DEVICE_ID={DEVICE_ID}...")
    pci_addrs = find_pci_devices_by_id(VENDOR_ID, DEVICE_ID)

    if not pci_addrs:
        sys.exit(1)

    for pci_addr in pci_addrs:
        unbind_device(pci_addr)
    time.sleep(1)

    for pci_addr in pci_addrs:
        remove_device(pci_addr)
    time.sleep(1)

    rescan_pci()
    time.sleep(2)

    if DRIVER_NAME:
        for pci_addr in pci_addrs:
            bind_device(pci_addr, DRIVER_NAME)

    print("Done.")

if __name__ == "__main__":
    if os.geteuid() != 0:
        print("This script must be run as root (sudo).")
        sys.exit(1)
    main()
