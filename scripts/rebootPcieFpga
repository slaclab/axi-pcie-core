#!/usr/bin/env python3
#-----------------------------------------------------------------------------
# Company    : SLAC National Accelerator Laboratory
#-----------------------------------------------------------------------------
#  Description: BPI/SPIx4/SPIx8 Reprogrmming Script
#-----------------------------------------------------------------------------
# This file is part of the 'axi-pcie-core'. It is subject to
# the license terms in the LICENSE.txt file found in the top-level directory
# of this distribution and at:
#    https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
# No part of the 'axi-pcie-core', including this file, may be
# copied, modified, propagated, or distributed except according to the terms
# contained in the LICENSE.txt file.
#-----------------------------------------------------------------------------

import pyrogue as pr
import os
import importlib
import subprocess
import argparse

baseDir = os.path.dirname(os.path.realpath(__file__))

print(f"Basedir = {baseDir}")

# First see if surf and axipcie are already in the python path
try:
    import surf
    import axipcie

# Otherwise assume it is relative in a standard development directory structure
except:
    pr.addLibraryPath(baseDir + '/../python')
    pr.addLibraryPath(baseDir + '/../../surf/python')

import sys
import re
import time
import glob
import argparse
import rogue.hardware.axi
import axipcie as pcie
from collections import OrderedDict as odict

#################################################################

def get_pcie_address(dev):
    dev = dev.split('/')[-1]  # Strip path if needed
    try:
        with open(f'/proc/{dev}', "r", encoding='utf-8', errors='ignore') as file:
            pcie_address = ''
            for line in file:
                if 'Up Time Count' in line and '4294967295' in line:
                    print('\nPlease reboot the computer or manually remove/rescan PCIe card\n')
                    exit()
                match = re.match(r'^PCIe\[BUS:NUM:SLOT.FUNC\]\s*:\s*(.*)', line)
                if match:
                    pcie_address = match.group(1).strip()
            return pcie_address
    except FileNotFoundError:
        return ''

#################################################################

class Root(pr.Root):
    def __init__(self, dev='', **kwargs):
        super().__init__(pollEn=False, initRead=True, **kwargs)

        # Create the stream interface
        self.memMap = rogue.hardware.axi.AxiMemMap(dev)
        self.addInterface(self.memMap)

        # Add Base Device
        self.add(pcie.AxiPcieCore(
            memBase = self.memMap,
            useBpi  = False,
            useSpi  = False,
        ))

#################################################################

if __name__ == "__main__":

    # Set the argument parser
    parser = argparse.ArgumentParser()

    # Convert str to bool
    argBool = lambda s: s.lower() in ['true', 't', 'yes', '1']

    # Add arguments
    parser.add_argument(
        "--dev",
        type     = str,
        required = False,
        default  = "/dev/datadev_0",
        help     = "path to device",
    )

    parser.add_argument(
        "--rescan",
        type     = argBool,
        required = False,
        default  = True,
        help     = 'Rescan PCIe devices after update',
    )

    # Get the arguments
    args = parser.parse_args()

    # Check if we need to run as sudo
    pci_addr = get_pcie_address(args.dev)
    if args.rescan and (pci_addr != '') and (os.geteuid() != 0):
        print("This script must be run as root (sudo).")
        print("\n\n\ne.g. sudo -E $(which python) scripts/rebootPcieFpga.py\n\n\n")
        exit()

    #################################################################

    with Root(dev=args.dev) as root:

        # Create useful pointers
        AxiVersion = root.AxiPcieCore.AxiVersion

        # Printout Current AxiVersion status
        print('#########################################')
        print('Current Firmware Loaded on the PCIe card:')
        print('#########################################')
        AxiVersion.printStatus()
        print('#########################################')

        AxiVersion.FpgaReload()

    #################################################################

    if args.rescan and (pci_addr != ''):

        def write_sysfs(path, value):
            try:
                with open(path, 'w') as f:
                    f.write(value)
            except Exception as e:
                print(f"Error writing to {path}: {e}")
                sys.exit(1)

        def unbind_device():
            path = f"/sys/bus/pci/devices/{pci_addr}/driver/unbind"
            if os.path.exists(path):
                print(f"Unbinding {pci_addr}")
                write_sysfs(path, pci_addr)
            else:
                print(f"No driver bound or invalid device: {pci_addr}")

        def remove_device():
            path = f"/sys/bus/pci/devices/{pci_addr}/remove"
            if os.path.exists(path):
                print(f"Removing {pci_addr} from PCI bus")
                write_sysfs(path, "1")
            else:
                print(f"Device {pci_addr} not found in sysfs")

        def rescan_pci():
            path = "/sys/bus/pci/rescan"
            print("Rescanning PCI bus")
            write_sysfs(path, "1")

        unbind_device()
        time.sleep(1)

        remove_device()
        time.sleep(1)

        rescan_pci()
        time.sleep(1)

        # Wait for /dev node to return
        for i in range(10):
            if os.path.exists(args.dev):
                time.sleep(1)  # Give driver time to initialize
                break
            time.sleep(0.5)
        else:
            print(f"[ERROR] Device node {args.dev} not found after rescan.")
            sys.exit(1)

        # Print the new firmware string
        with Root(dev=args.dev) as root:
            print('#########################################')
            print('New Firmware Loaded on the PCIe card:')
            print('#########################################')
            root.AxiPcieCore.AxiVersion.printStatus()
            print('#########################################')

    else:
        print('\nPlease reboot the computer')

    #################################################################
