#!/usr/bin/env python3
#-----------------------------------------------------------------------------
# Title      : BPI/SPIx4/SPIx8 Prom Update
#-----------------------------------------------------------------------------
# This file is part of the 'axi-pcie-core'. It is subject to
# the license terms in the LICENSE.txt file found in the top-level directory
# of this distribution and at:
#    https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
# No part of the 'axi-pcie-core', including this file, may be
# copied, modified, propagated, or distributed except according to the terms
# contained in the LICENSE.txt file.
#-----------------------------------------------------------------------------

import os
import subprocess
import time
import sys

KEYWORD = "SLAC"  # Replace with a more specific string if needed
DRIVER_NAME = None  # Optionally set to driver name (e.g., "xhci_hcd")

def find_pci_device_by_keyword(keyword):
    try:
        result = subprocess.check_output(["lspci", "-D"]).decode("utf-8")
        #result = subprocess.check_output(["lspci", "-D"], text=True)
        for line in result.strip().split("\n"):
            if keyword.lower() in line.lower():
                pci_addr = line.split()[0]
                print(f"Found device: {line}")
                return pci_addr
        print(f"No PCIe device found with keyword '{keyword}'.")
    except Exception as e:
        print(f"Error running lspci: {e}")
    return None

def write_sysfs(path, value):
    try:
        with open(path, 'w') as f:
            f.write(value)
    except Exception as e:
        print(f"Error writing to {path}: {e}")
        sys.exit(1)

def unbind_device(pci_addr):
    path = f"/sys/bus/pci/devices/{pci_addr}/driver/unbind"
    if os.path.exists(path):
        print(f"Unbinding {pci_addr}")
        write_sysfs(path, pci_addr)
    else:
        print(f"No driver bound or invalid device: {pci_addr}")

def remove_device(pci_addr):
    path = f"/sys/bus/pci/devices/{pci_addr}/remove"
    if os.path.exists(path):
        print(f"Removing {pci_addr} from PCI bus")
        write_sysfs(path, "1")
    else:
        print(f"Device {pci_addr} not found in sysfs")

def rescan_pci():
    path = "/sys/bus/pci/rescan"
    print("Rescanning PCI bus")
    write_sysfs(path, "1")

def bind_device(pci_addr, driver):
    if not driver:
        return
    path = f"/sys/bus/pci/drivers/{driver}/bind"
    if os.path.exists(path):
        print(f"Rebinding {pci_addr} to driver {driver}")
        write_sysfs(path, pci_addr)
    else:
        print(f"Driver {driver} not found. Skipping rebind.")

def main():
    print(f"Searching for PCIe device containing '{KEYWORD}'...")
    pci_addr = find_pci_device_by_keyword(KEYWORD)

    if not pci_addr:
        sys.exit(1)

    unbind_device(pci_addr)
    time.sleep(1)

    print("You should now power-cycle or externally reset the device before continuing...")
    input("Press ENTER after resetting the device.")

    remove_device(pci_addr)
    time.sleep(1)

    rescan_pci()
    time.sleep(2)

    if DRIVER_NAME:
        bind_device(pci_addr, DRIVER_NAME)

    print("Done.")

if __name__ == "__main__":
    if os.geteuid() != 0:
        print("This script must be run as root (sudo).")
        sys.exit(1)
    main()  
